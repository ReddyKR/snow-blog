<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title></title>
   
   <link>http://blog.jahnelgroup.com/</link>
   <description>A blog about ServiceNow</description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>How to Not Fail Your ServiceNow Certification Exam</title>
	  <link>//How-to-Not-Fail-Your-ServiceNow-Certification-Exam</link>
	  <author>Dylan Mann</author>
	  <pubDate>2017-10-04T00:00:00+00:00</pubDate>
	  <guid>//How-to-Not-Fail-Your-ServiceNow-Certification-Exam</guid>
	  <description><![CDATA[
	     <p>Want a foolproof plan to guarantee success on your ServiceNow Certification Exam? Well, this isn’t it, but it’s as close as I can get! I’m not offering any guarantees, but what I can offer is a guide which has been proven successful for both myself and the rest of my team. By the end of reading this post my goal is to have you feeling prepared and confident to go out and crush your ServiceNow certification exam!</p>

<h3>Who is This Post For?</h3>

<p>This post is for anyone looking to prepare for their certification exam(s). Whether it be the System Administrator Exam, Application Developer Exam, or both, you’ve come to the right place.</p>

<p>If you’re new to ServiceNow, I’ll share my story and process of going from having zero knowledge of the platform to becoming a skilled ServiceNow developer and passing both certification exams. If you already have experience with the platform and just want some extra study materials there’s something here for you as well.</p>

<h3>My Journey</h3>

<p>When I was offered the opportunity to join my company's ServiceNow team I had no experience or knowledge of the platform. I was challenged with the goal of going through the training, learning the ins and outs of ServiceNow and passing both of my certification exams. I started out by simply creating a developer account, claiming my own PDI and going through the ServiceNow learning plans. It’s important to note, when learning ServiceNow <b>there is no substitute for working hands on with the platform.</b> If you’re just getting started, claim a PDI, (it’s FREE) and go through the learning plans completing each exercise. By the end you’ll have a decent understanding of what the platform can do and how to use it.</p>

<p>There are 3 main learning plans, with the “Getting Started with ServiceNow” learning path covering all 3 in one. For the first two weeks I spent my time going through the modules, reading the docs, completing the exercises and taking notes on the core concepts of each.</p>

<p>After completing all the training modules I began studying various study materials and resources throughout the web and ServiceNow community. I studied flashcards endlessly, referred to the exam blueprints and studied the specified material within the ServiceNow documentation. I took Udemy courses and practice exams but still didn’t feel comfortable with the exam. So I went through the training modules again, rereading the documentation and redoing the exercises because again, <b>there is no better substitute for working hands on with the platform.</b> Going through the second time, I noticed there were several details I overlooked during my first read through. I had a better understanding of what I was reading and the information was better committed to memory. A lot of the questions are taken directly from the learning path so I highly recommend going over them again to prepare yourself for your test. After enough dedicated study and practice working with ServiceNow, you should be in good shape to go out and crush your exam.</p>

<h3>Starting your own ServiceNow Journey</h3>

<h4>Review the exam blueprints</h4>
<p>I’m putting these blueprints up first because I believe they’re the most valuable resource you can find. It gives you the prerequisites for the exam, lists out what a successful candidate can do in ServiceNow, the exam structure, learning domains and even sample test questions. If you go through the blueprint and truly understand each topic listed you will have no problem passing the exam.</p>

<p><a href="https://www.servicenow.com/content/dam/servicenow/other-documents/training/ServiceNow-Sys-Admin-Exam-Specs.pdf">System Administration Exam Blueprint</a><br />
<a href="https://www.servicenow.com/content/dam/servicenow/other-documents/training/exam-blueprint.pdf">Application Developer Exam Blueprint</a></p>

<h4>Read through the learning plans and do the exercises</h4>
<p>This covers all topics and learning plans in one convenient package. It’s jam packed with valuable information about the platform and exercises to practice working within ServiceNow. Many of the questions on the exam will be taken directly from these documents and exercises. You must know this material!</p>

<p><a href="https://developer.servicenow.com/app.do#!/lp/new_to_servicenow?v=jakarta">The “Getting Started with ServiceNow” Learning Plan</a></p>

<h4>Take a Udemy Course</h4>
<p>These Udemy Courses are a great resource for an indepth look into the platform. If you don’t have the opportunity to learn from an experienced ServiceNow developer first hand, you can watch these tutorials and see how the experts do it. Once you create a Udemy Account you get great discounts on the courses, but if you don’t feel like dropping the cash I totally get it. There are plenty of other great free resources online.</p>

<p><a href="https://www.udemy.com/courses/search/?q=ServiceNow&amp;src=ukw">ServiceNow System Admin and App Developer Udemy Courses</a></p>

<h4>Engage with the community and read the SNOW Documentation</h4>
<p>While working with the platform, which I highly recommend you do as often as possible, you’re going to come across some issues or roadblocks. If you need help or are looking for answers, there’s no better place to go than the ServiceNow Documentation page or the ServiceNow Community Forum. The SNOW Documentation is fresh off the press and is continually being updated. The Community Forum is a great place to ask questions, interact with other developers and learn from others around you.</p>

<p><a href="https://community.servicenow.com/welcome">ServiceNow Community Forum</a><br />
<a href="https://developer.servicenow.com/app.do#!/documentation?v=jakarta">ServiceNow Developer Documentation</a></p>

<h4>Review Flash Cards</h4>
<p>If you’re looking for pure study materials for your test, these flashcards are a great resource. The System Admin flashcards are broken up by module so you can break down your plan of study into digestible pieces. Check out the App Developer flashcards to find information on team development, scripting, application security and working with data.</p>

<p><a href="https://quizlet.com/class/2490040/">System Administration Exam Flashcards</a><br />
<a href="https://quizlet.com/217493821/servicenow-application-developer-certification-flash-cards/">Application Developer Exam Flashcards</a></p>

<h4>Take a Practice Exam</h4>
<p>Take this practice exam to get a sense of what the test questions are like. Some of these questions are taken directly from the exam and serve as a good way to measure how prepared you really are.</p>

<p><a href="https://www.classmarker.com/online-test/start/?quiz=yb752a207d482ecf">Classmarker Practice Exam</a></p>

<h4>Know What to Expect</h4>
<ul>
	<li>The exam has 60 Questions</li>
	<li>To pass you need a score of 70% or better</li>
	<li>The questions are multiple choice, true or false and select all that apply</li>
 	<li>You have 90 minutes to complete the exam</li>
</ul>
<p>**Check out the <a href="https://www.servicenow.com/content/dam/servicenow/other-documents/training/ServiceNow-Sys-Admin-Exam-Specs.pdf">exam blueprint</a> for more detailed information</p>

<p>Hopefully this post has given you some resources to study from and calmed some of your anxieties about the test. If you feel like you know the material, be confident and know you’ll do fine. The test is nothing to be afraid of, and if you feel like you don’t know the material, keep learning!</p>

<h4>More Discussions and Resources you can check out</h4>

<p><a href="https://community.servicenow.com/community/blogs/blog/2017/04/27/how-to-cheat-even-better-on-your-certification">How to Cheat on Your ServiceNow Certification Exam</a> by Sean McClean
<br />
<a href="https://community.servicenow.com/groups/developer-certification/blog/2015/09/03/learning-servicenow-from-scratch-and-prepping-for-the-certification-exam">Learning ServiceNow from Scratch and Prepping for the Certification Exam</a> by Pradeep Sharma
<br />
<a href="https://community.servicenow.com/thread/284380">Discussion on Changes made to the Implementation Specialist Certification</a>
<br />
<a href="https://community.servicenow.com/message/789904#789904">Discussion on Beginners Learning ServiceNow</a><br />
<a href="https://www.webassessor.com/wa.do?page=publicHome&amp;branding=SERVICE_NOW">Register for you Exam Here</a></p>

	  ]]></description>
	</item>

	<item>
	  <title>A Beginner’s Insight into the User Interface on ServiceNow</title>
	  <link>//user-interface</link>
	  <author>John Lee</author>
	  <pubDate>2017-10-02T10:00:00+00:00</pubDate>
	  <guid>//user-interface</guid>
	  <description><![CDATA[
	     <p>As a new developer, working on the platform for about 5 months, these are some of the thoughts I have on the front-end development for ServiceNow. This post is targeted towards people that have just gone through ServiceNow’s Learning Plan, started getting used to the platform, or just generally curious on how ServiceNow approaches interfaces/design. Veterans are more than welcome to expand on ideas that are going to be listed here and give any helpful insight.</p>

<p>For an application that is consumed by an end user, the best practice is to create a separation between front-end design and back-end logic - this is known as the MVC pattern. It keeps projects clean and priorities focused. Within ServiceNow, it’s initially hard to see that division. You can go to the platform’s browser IDE, Studio, and look through your application to see the various sections in the Application Explorer. You have tabs like Forms &amp; UI that lets you customize your forms and how your lists are presented, but they sit next to things like business logic scripts. It’s all encompassing and from the initial pass through, the application feels complete. Eventually it gets added as another module on the list of applications on the main browser.</p>

<p><img src="assets/images/UserInter/BasicSite.jpg" alt="base image" title="Base Image" /></p>

<p>…But is it done? It isn’t some sort of JSON being displayed on a command window but it is bare in aesthetics. What if you want a more engaging interface for your users? The list views are practical but ask any front-end developer (or end-user, for that matter) and they’ll immediately ask for alternatives. With over a decade worth of feedback and upgrades, ServiceNow has created other options for developers to make their instances or applications visually appealing. Its interesting to see how much it’s progressed and explore what these options are.</p>

<hr />

<h3 id="the-angular24-experiment">The Angular2/4 Experiment</h3>

<p><a href="http://angularjs.blogspot.com/2017/03/angular-400-now-available.html">Angular 4</a>, formerly Angular 2, is the newest version of the popular AngularJS front-end framework led by the Angular Team at Google. For new projects that are not weighed down by legacy projects or pre-existing requirements, it’s great to use a newer version of a tool. Pair Angular 2/4 up with angular-cli and you have a great system of generating files, testing, and managing front-end development. That said, it’s a shame ServiceNow does not currently support it (Jakarta).  If developers do want to pursue this route, it would most likely be a stand-alone front-end app that would use ServiceNow as their back-end. It would save a lot of headache just waiting for ServiceNow to support it, but it is feasible. Check out Nathan Grove’s Angular 2 set-up and the workshop he led on a sample Angular2 App:</p>

<ul>
  <li><a href="https://community.servicenow.com/docs/DOC-6626">Angular2 Development Environment</a></li>
  <li><a href="https://community.servicenow.com/docs/DOC-6788">Angular2 applications for the ServiceNow platform</a></li>
</ul>

<p><img src="assets/images/UserInter/Angular4_Attach_Test.gif" alt="Angular4 Test Attachment" title="Angular4 Test Attachment" />
<em>The application is a little silly, but does illustrate the point he’s trying to make. Here, from the REST API Explorer, we can update a record. Navigating to the record, we can see the changes that have been applied.</em></p>

<p><img src="assets/images/UserInter/Angular4_Attach_Application.gif" alt="Angular4 Application Attachment" title="Angular4 Application Attachment" />
<em>Extending further pass the REST API test, we can actually use Nathan Grove’s application to create an image, list all the records of specific table, and even attach the image onto it.</em></p>

<p>It seems to defeat the purpose of building something outside of ServiceNow and miss out in features built into the platform, but there is merit in having loosely coupled applications. It would be simple enough for you to move from ServiceNow and attach this onto some other framework if you needed to. If we want to stay on the platform, however, we could jump back to what ServiceNow currently supports: AngularJS.</p>

<hr />

<h3 id="the-angularjs-application">The AngularJS Application</h3>

<p>If you’ve gone through the Learning Plan, you should have run through the “<a href="https://developer.servicenow.com/app.do#!/lp/new_to_servicenow/app_store_learnv2_angularjs_jakarta_introduction_to_angularjs_apps_in_servicenow_objectives?v=jakarta">Introduction to AngularJS in ServiceNow</a>”. If not, I highly recommend going through “<a href="https://developer.servicenow.com/app.do#!/lp/new_to_servicenow?v=jakarta">New to ServiceNow</a>” Learning Plan if you’re interested in the platform or studying for the certification exams. Here’s the quick recap:</p>

<ul>
  <li>Create UI Pages for your application</li>
  <li>Within the Jelly Template, insert a script source to AngularJS</li>
  <li>Write your AngularJS logic</li>
  <li>Application data can be accessed and UI Scripts can be used to create functional front-end</li>
  <li>Styling and Bootstrap can be added to enhance the design</li>
</ul>

<p><img src="assets/images/UserInter/angularjs_uipage.jpg" alt="&quot;AngularJS UI Page&quot;" title="AngularJS UI Page" />
<em>The Jelly Script tags along with the AngularJS script and bootstrap link can be seen here.</em></p>

<p><img src="assets/images/UserInter/angularjs_uiscript.jpg" alt="AngularJS UI Script" title="AngularJS UI Script" />
<em>Client script logic can be utilized through UI Scripts.</em></p>

<p><img src="assets/images/UserInter/AngularJS_Sample.gif" alt="AngularJS Example&quot;" title="AngularJS Example" />
<em>This simple example here does illustrate some of the nice features, such as two-way data-binding and customized HTML/CSS.</em></p>

<p>It’s pretty concise and gives you the basic elements you need to get your application looking nice. However, there are some inherent problems that arise as you scale up your project. You have various references on the UI Page of UI Scripts for Client side scripting, Script Includes/Processing Script for Server side scripting, and CSS styling as well. When you move up and view from the top-down, page navigation gets awkward with endpoints like ‘x_1010_app.do’. This seems like it should be separated from your base application and unified through a manager. So what is the alternative?</p>

<hr />

<h3 id="the-content-management-system">The Content Management System</h3>
<p><img src="assets/images/UserInter/CMS_preview.gif" alt="CMS Site" title="CMS Site" />
<em>Now it looks more like a consumer site!</em></p>

<p>The CMS has been around for years, predating the four most recent releases out today. If you understand Jelly Script and/or have a complex service catalog, this might be the choice for you. As a plugin, it creates a ServiceNow application that creates custom interfaces for the ServiceNow platform and other applications. When you want to create a new site within your instance, you can create a new Content Site. This encompasses all the various components where you can customize the HTML, CSS, layout, and more. To access tables and persist data, Developers can access their ServiceNow data through Jelly Scripts to retrieve it and iframes display it.  In the sense of the high-level overview, the CMS does achieve the same thing as our previous AngularJS app, but it’s different in its packaging. The basic structure is:</p>

<p><img src="assets/images/UserInter/CMS_Form.jpg" alt="CMS Site Page" title="CMS Site Page" /></p>

<ul>
  <li>Content Site</li>
  <li>Content Type: Defines how the data is pull from a particular database table and rendered within the site</li>
  <li>Content Page: Displays blocks of content</li>
  <li>Layout: User Interface macro that defines a HTML structure</li>
  <li>Dropzone: Define where the content blocks are placed to make up the page</li>
  <li>Content Block: Chunks of HTML that make-up a page, the output is HTML</li>
  <li>Theme</li>
  <li>CSS</li>
</ul>

<p>The front-end design here is bundled together. Compare that to the multiple UI pages and UI Scripts, it’s good to see a contained, pre-defined hierarchy that we can play around with. While this does seem intuitive, I recommend not focusing on this method too much and trying the next one, for reasons discussed later.</p>

<hr />

<h3 id="the-service-portal">The Service Portal</h3>

<p><img src="assets/images/UserInter/SP_website.gif" alt="Service Portal Site" title="Service Portal Site" />
<em>The Service Portal allows for further customizations that are not available on the Content Management System.</em></p>

<p>The Service Portal seems to be the standard when attempting to create a better user experience on ServiceNow. It utilizes AngularJS and acts more as a visual layer that sits on top of ServiceNow. Much like a Content Site for the CMS, the Service Portal has ‘Portals’ to the site you want to redirect your users to. From the newly created portal record, you can set things like the URL suffix, the default homepage, the 404 page, and much more. It also includes great additions like global CSS variables, menu set-up, and a Theme for the entire portal.</p>

<p><img src="assets/images/UserInter/ServicePortal.jpg" alt="Portal Example" title="Portal Example" />
<em>Looks very similar to that of the CMS main window.</em></p>

<p>From here, pages can be created and linked to the portal itself. Within those pages are the most interesting part of the Service Portal: widgets. These act as self-contained HTML, CSS, Client script, and Server script blocks that can be arranged and reused on portal pages.</p>

<p><img src="assets/images/UserInter/Widget.jpg" alt="Widget Example" title="Widget Example" />
<em>Everything you need to develop a widget; easily accessible, side-by-side.</em></p>

<p>The TechNow talks are great places to start if you want to go this route.</p>

<ul>
  <li><a href="https://www.youtube.com/watch?v=wzCGZ5Mq5iU">Ask the Experts – TechNow Ep 28 – Service Portal</a></li>
  <li><a href="https://www.youtube.com/watch?v=HtOpbk_00Qw">Ask the Experts: Service Portal Part 2, TechNow 29</a></li>
</ul>

<p>This seems eerily familiar to the CMS, so why choose one over the other?</p>

<hr />

<h3 id="cms-vs-service-portal">CMS vs Service Portal</h3>

<p>You can see forums on this topic that are fairly recent. Service Portal, in a developer perspective, is simply easier to use. CMS and Service Portal are separate entities. While CMS is prone to having update conflicts, Service Portal is a self-enclosed application independent from any new versions that get released. Another point for Service Portal is the lack of Jelly Script and iframes. Jelly Script is not widely popular and makes it difficult to find proper/helpful documentation. With iframes, they are difficult to style and would be susceptible to upgrade issues. Service Portal uses AngularJS, a popular framework, and being just a visual layer allows for a better control of the page design. However, there is one notable downside to the Service Portal. It only allows for one Catalog per portal out of the box, whereas the CMS iframes can handle the need for complex catalogs. Multiple Catalog references can be achieved on a Service Portal, but it requires various widget communication and complexity that can be a hassle.</p>

<p>For a more thorough discussion on this topic, check out Goran Lundqvist and Brad Tilton’s thoughts on the matter:</p>

<ul>
  <li><a href="https://community.servicenow.com/community/develop/blog/2016/07/22/service-portal-and-cms-thoughts">Service Portal and CMS Thoughts</a></li>
  <li><a href="https://community.servicenow.com/community/develop/blog/2017/05/16/do-i-dare-to-move-from-cms-to-service-portal">Do I dare to move from CMS to Service Portal</a></li>
</ul>

<h3 id="up-next">Up Next?</h3>

<p>It’s short-sighted to say that these will be the only options available for ServiceNow. The company aims to do two major releases a year and is steadily growing. With more developers coming on board to build on the platform, the company will be more than likely to accommodate them with the most practical and widely used frameworks/tools. So while Angular 4 is not currently available, we might see it in the near future along with React, Redux, and many others.</p>

	  ]]></description>
	</item>


</channel>
</rss>
