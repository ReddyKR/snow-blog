<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jahnel Group ServiceNow Blog - Articles</title>
    <description>A blog about ServiceNow</description>
    <link>
    http://JahnelGroup.github.io/snow-blog/</link>
    
      
      <item>
        <title>A Beginner’s Insight into the User Interface on ServiceNow</title>
        
          <description>&lt;p&gt;
  As a new developer, working on the platform for about 5 months, these are some of the thoughts I have on the front-end development for ServiceNow. This post is targeted towards people that have just gone through ServiceNow’s Learning Plan, started getting used to the platform, or just generally curious on how ServiceNow approaches interfaces/design. Veterans are more than welcome to expand on ideas that are going to be listed here and give any helpful insight.
&lt;/p&gt;
&lt;p&gt;
For an application that is consumed by an end user, the best practice is to create a separation between front-end design and back-end logic - this is known as the MVC pattern. It keeps projects clean and priorities focused. Within ServiceNow, it’s initially hard to see that division. You can go to the platform’s browser IDE, Studio, and look through your application to see the various sections in the Application Explorer. You have tabs like Forms &amp;amp; UI that lets you customize your forms and how your lists are presented, but they sit next to things like business logic scripts. It’s all encompassing and from the initial pass through, the application feels complete. Eventually it gets added as another module on the list of applications on the main browser.
&lt;/p&gt;

</description>
        
        <pubDate>Sat, 27 Sep 2014 10:18:00 +0000</pubDate>
        <link>
        http://JahnelGroup.github.io/snow-blog//user-interface</link>
        <guid isPermaLink="true">http://JahnelGroup.github.io/snow-blog//user-interface</guid>
      </item>
      
    
      
      <item>
        <title>A Full and Comprehensive Style Test</title>
        
          <description>&lt;p&gt;This is just an &lt;em&gt;ipsis verbis&lt;/em&gt; copy of the first example running on the &lt;a href=&quot;http://demo.ghost.io&quot;&gt;Ghost Demo&lt;/a&gt;. This shows how you can use html styling to achieve your hopes.&lt;/p&gt;

</description>
        
        <pubDate>Sat, 27 Sep 2014 10:18:00 +0000</pubDate>
        <link>
        http://JahnelGroup.github.io/snow-blog//a-full-and-comprehensive-style-test</link>
        <guid isPermaLink="true">http://JahnelGroup.github.io/snow-blog//a-full-and-comprehensive-style-test</guid>
      </item>
      
    
      
      <item>
        <title>Jakub Test</title>
        
          <description>&lt;p&gt;This is just an &lt;em&gt;ipsis verbis&lt;/em&gt; copy of the first example running on the &lt;a href=&quot;http://demo.ghost.io&quot;&gt;Ghost Demo&lt;/a&gt;. This shows how you can use html styling to achieve your hopes.&lt;/p&gt;

</description>
        
        <pubDate>Sat, 27 Sep 2014 10:18:00 +0000</pubDate>
        <link>
        http://JahnelGroup.github.io/snow-blog//Jakubs-Post</link>
        <guid isPermaLink="true">http://JahnelGroup.github.io/snow-blog//Jakubs-Post</guid>
      </item>
      
    
      
      <item>
        <title>Dylan Test</title>
        
          <description>&lt;p&gt;This is just an &lt;em&gt;ipsis verbis&lt;/em&gt; copy of the first example running on the &lt;a href=&quot;http://demo.ghost.io&quot;&gt;Ghost Demo&lt;/a&gt;. This shows how you can use html styling to achieve your hopes.&lt;/p&gt;

</description>
        
        <pubDate>Sat, 27 Sep 2014 10:18:00 +0000</pubDate>
        <link>
        http://JahnelGroup.github.io/snow-blog//Dylans-Post</link>
        <guid isPermaLink="true">http://JahnelGroup.github.io/snow-blog//Dylans-Post</guid>
      </item>
      
    
  </channel>
</rss>
